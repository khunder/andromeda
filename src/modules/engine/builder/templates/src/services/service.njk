import  {AndromedaLogger} from "../config/andromeda-logger.js";
const Logger = new AndromedaLogger();
import {v4} from "uuid";
import { {{ ProcessDef }}ProcessInstanceContext} from "./{{ ProcessDef.toLowerCase() }}.process-instance-context.js";
import {PersistenceGateway} from "../modules/persistence/persistence-gateway.js";
import {ContainerService} from "../modules/container/container.service.js";
import {WorkflowModel} from "../modules/container/workflow-model.js";
import {Config} from "../config/config.js";

class {{ServiceClassName}} {

    processInstanceId
    _context = new {{ ProcessDef }}ProcessInstanceContext();

    bootstrap(){
    }

    constructor(processInstanceId)
    {
        if (processInstanceId) {
            // in case we resume a process instance after a container restart
            this.processInstanceId = processInstanceId;
            // this.flowService = new TestFlowService(this.id);
        } else {
            this.processInstanceId = v4();
            // this.flowService = new TestFlowService(this.id);
        }

    }

    static async createInstance(processInstanceId)
    {
        try{
            const instance = new BasicScenarioProcessInstanceService(processInstanceId)
            await PersistenceGateway.newProcessInstance({
                processInstanceId: instance.processInstanceId,
                deploymentId: Config.getInstance().deploymentId,
                processDef: '{{ ProcessDef }}',
                containerId: ContainerService.containerId
            });
            ContainerService.getInstance().lock(instance)
            return instance;
        }
        catch(e){
            Logger.error(e);
        }
    }

    async close(){
          try{
            ContainerService.getInstance().lock(this);
            await PersistenceGateway.closeProcessInstance({
                processInstanceId: this.processInstanceId,
            });
        }
        catch(e){
            Logger.error(e);
        }
    }

    isTwoPhaseComponent(type){
        return type === "CatchEvent" || type === "HumanTask"
    }

    async evaluate(expression) {
        try {
          return eval(`${expression};`);
        }catch (e) {
          Logger.error(e);
          throw e;
        }
    }

    createFlowEvent(flowEventId){
        let flowEvent = { processInstanceId: this.processInstanceId, flowId: flowEventId, status: 1 };
        if(WorkflowModel[flowEventId] && this.isTwoPhaseComponent(WorkflowModel[flowEventId].target.$type) ){
            flowEvent.status = 0;
        }

        if(WorkflowModel[flowEventId] && this[`customize${WorkflowModel[flowEventId].target.$type}FlowEvent`]){
            this[`customize${WorkflowModel[flowEventId].target.$type}FlowEvent`](flowEvent);
        }

        return flowEvent;

    }

    async failProcessInstance(flowId, __localContext){
         await PersistenceGateway.failFlowEvent({
                processInstanceId: this.processInstanceId,
                flowId: flowId
            });
    }

    callFunction(func, localContext, args  )
    {
        let fnArgs = args || {}
        func.call(this, ...Object.values(fnArgs))
            .catch(async (error) =>
            {
                Logger.error(error);
                await this.failProcessInstance(args.incomingFlowId, localContext);
            }).finally(() =>
            {
            });

    }

}

export default {{ServiceClassName}}