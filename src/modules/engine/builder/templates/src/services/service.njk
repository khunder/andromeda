import  {AndromedaLogger} from "../config/andromeda-logger.js";
const Logger = new AndromedaLogger();
import {v4} from "uuid";
import { {{ ProcessDef }}ProcessInstanceContext} from "./{{ ProcessDef.toLowerCase() }}.process-instance-context.js";
import {PersistenceGateway} from "../modules/persistence/persistence-gateway.js";
import {ContainerService} from "../modules/container/container.service.js";
import {Config} from "../config/config.js";

class {{ServiceClassName}} {

    processInstanceId
    _context = new {{ ProcessDef }}ProcessInstanceContext();

    bootstrap(){
    }

    constructor(processInstanceId)
    {
        if (processInstanceId) {
            // in case we resume a process instance after a container restart
            this.processInstanceId = processInstanceId;
            // this.flowService = new TestFlowService(this.id);
        } else {
            this.processInstanceId = v4();
            // this.flowService = new TestFlowService(this.id);
        }

    }

    static async createInstance(processInstanceId)
    {
        try{
            const instance = new BasicScenarioProcessInstanceService(processInstanceId)
            await PersistenceGateway.newProcessInstance({
                processInstanceId: instance.processInstanceId,
                deploymentId: Config.getInstance().deploymentId,
                processDef: '{{ ProcessDef }}',
                containerId: ContainerService.containerId
            });
            ContainerService.getInstance().lock(instance)
            return instance;
        }
        catch(e){
            Logger.error(e);
        }
    }

    close(){

    }
}

export default {{ServiceClassName}}