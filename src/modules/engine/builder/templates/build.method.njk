async fn_{{nodeContext.id}} (flowModel) {

  let __localMethodContext = {
    nodeSession: v4(),
    nodeId: '{{ nodeContext.id }}',
    nodeName: '{{ nodeContext.name }}',
    type: '{{ nodeContext.type }}',
    incomingFlowId: flowModel? flowModel.id: null
  }

  Logger.trace(`visiting node {{ nodeContext.id }}, session: ${__localMethodContext.nodeSession}`);

  try {
{% if nodeContext.args and nodeContext.args.executeBody !== null  %}
    if(flowModel.executeBody) {
{% endif %}
      {{ nodeContext.body }}
      this._context.saveContext();
{% if nodeContext.args and nodeContext.args.resumeExecution %}
      if(flowModel.resumeExecution){
{% endif %}
        {% include "build.method.next.calls.njk" %}
{% if nodeContext.args and nodeContext.args.resumeExecution  %}
      }
{% endif %}
{% if nodeContext.args and nodeContext.args.executeBody !== null %}
    }else{
      {{ nodeContext.alternateBody }}
    }
{% endif %}
  } catch (_bpmnProcessorException) {
    const stack = _bpmnProcessorException.stack;
    throw new Error(JSON.stringify({ stacktrace: stack, context: __localMethodContext }));
  }
}

